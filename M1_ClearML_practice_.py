# [–ù–æ—É—Ç–±—É–∫ –¥–ª—è —Ä–µ—à–µ–Ω–∏—è –ø—Ä–∞–∫—Ç–∏–∫–∏](https://stepik.org/lesson/1500755/step/12?unit=1520869)
# 1Ô∏è‚É£ **–û–ø–∏—Å–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞ –¥–ª—è —Ä–µ—à–µ–Ω–∏—è –∑–∞–¥–∞—á–∏.**
# **–ó–∞–¥–∞—á–∞**: –æ–±—É—á–∏—Ç—å CatBoost, –∑–∞–ª–æ–≥–∏—Ä–æ–≤–∞—Ç—å –æ—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
# –í–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–¥–∞—Ç—å —Ñ–∞–π–ª —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ–º –ª—é–±–æ–µ_–∏–º—è.py –≤ –∫–æ—Ç–æ—Ä–æ–º:
# **–ë–∞–∑–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ (5 –±–∞–ª–ª–æ–≤)**
# * –ë—É–¥–µ—Ç –∑–∞–≥—Ä—É–∑–∫–∞ –¥–∞—Ç–∞—Å–µ—Ç–∞
# * –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ—á–Ω—É—é –∏ –≤–∞–ª–∏–¥–∞—Ü–∏–æ–Ω–Ω—É—é –≤—ã–±–æ—Ä–∫–∏
# * –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–ª—å–∫–æ –≤–∞–ª–∏–¥–∞—Ü–∏–æ–Ω–Ω–æ–π –≤—ã–±–æ—Ä–∫–∏
# * –û–±—É—á–µ–Ω–∏–µ –±—É—Å—Ç–∏–Ω–≥–∞ —Å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º –ø—Ä–æ—Ü–µ—Å—Å–∞ –æ–±—É—á–µ–Ω–∏—è –≤ ClearML –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –≥–∏–ø–µ—Ä–ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –º–æ–¥–µ–ª–∏
# * –†–∞—Å—á–µ—Ç –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫–∏ –Ω–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–æ–Ω–Ω–æ–π –≤—ã–±–æ—Ä–∫–µ (classification report –∏ Accuracy)
# * –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ–±—É—á–µ–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏
# **–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è (2 –±–∞–ª–ª–∞)**
# * –î–æ–±–∞–≤–∏—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Å—á–∏—Ç—ã–≤–∞–Ω–∏—è 2-—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Ñ–∞–π–ª–∞ –Ω–∞ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏–µ:
#   + `-- iterations` - –∑–∞–¥–∞—ë—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Ç–µ—Ä–∞—Ü–∏–π –±—É—Å—Ç–∏–Ω–≥–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 500)
#   + `-- verbose`- –∑–∞–¥–∞—ë—Ç –≤—ã–≤–æ–¥ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –æ–±—É—á–µ–Ω–∏—è CatBoost –≤ –∫–æ–Ω—Å–æ–ª—å (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é False)
# –ü—Ä–∏–º–µ—Ä –∫–æ–º–∞–Ω–¥—ã:`python –ª—é–±–æ–µ_–∏–º—è.py --iterations 200 --verbose 100`
# * –ü—Ä–æ–≤–µ—Å—Ç–∏ EDA –∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≥—Ä–∞—Ñ–∏–∫–∏ –≤ ClearML
# üëÄ –ü—Ä–∏ –∂–µ–ª–∞–Ω–∏–∏, —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø—Ä–æ–¥–µ–ª–∞—Ç—å —Å–ª–µ–¥—É—é—â–µ–µ:
# - –î–æ–±–∞–≤–∏—Ç—å —Ç–µ–≥–∏ –¥–ª—è —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞
# - –î–æ–±–∞–≤–∏—Ç—å –µ—â–µ –º–µ—Ç—Ä–∏–∫ –∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –∏—Ö –ø–æ –º–µ—Ä–µ –æ–±—É—á–µ–Ω–∏—è (–≥–ª–∞–≤–Ω–æ–µ –≤ –º–µ—Ä—É üòÅ)
# ‚ùóÔ∏è‚ùóÔ∏è‚ùóÔ∏è **P.S.** –î–∞–Ω–Ω—ã–π –Ω–æ—É—Ç–±—É–∫ - –¥–∞–ª–µ–∫–æ –Ω–µ –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ–µ –≤–µ—Ä–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ, –≤–æ—Å–ø—Ä–∏–Ω–∏–º–∞–π—Ç–µ –µ–≥–æ
# –∫–∞–∫ –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –≤–∞—à–µ–≥–æ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Ä–µ—à–µ–Ω–∏—è –∏–ª–∏ —á—Ç–æ–±—ã –ø–æ–±–æ—Ä–æ—Ç—å —Å—Ç—Ä–∞—Ö –±–µ–ª–æ–≥–æ –ª–∏—Å—Ç–∞ :)
# 2Ô∏è‚É£ –ü–æ–¥–∫–ª—é—á–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏

from dataclasses import dataclass, asdict

import os
import time
import argparse
import warnings
import numpy as np
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
# import torch

from sklearn.model_selection import train_test_split
from sklearn.metrics import classification_report, accuracy_score, confusion_matrix
from sklearn.metrics import f1_score, precision_score, recall_score, roc_auc_score

from catboost import CatBoostClassifier
from clearml import Task, Logger
from getpass import getpass

warnings.filterwarnings('ignore', category=UserWarning, module='clearml')

# –£—Å—Ç–∞–Ω–æ–≤–∏–º –æ–ø—Ü–∏–∏, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–º–æ–≥—É—Ç –ø—Ä–∏–≤–µ—Å—Ç–∏ —Ç–∞–±–ª–∏—Ü—É –∫ –∂–µ–ª–∞–µ–º–æ–º—É –≤–∏–¥—É
pd.set_option('display.max_columns', None)  # —Ä–µ–∞–ª–∏–∑—É–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –≤—ã–≤–æ–¥–∞ –≤—Å–µ—Ö —Å—Ç–æ–ª–±—Ü–æ–≤
pd.set_option('display.float_format', '{:.5f}'.format)  # –≤—ã–≤–æ–¥ –¥–æ 5 –∑–Ω–∞–∫–æ–≤ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π


# –ü–∞—Ä—Å–∏–Ω–≥ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
def parse_args():
    parser = argparse.ArgumentParser(description='CatBoost training with ClearML logging')
    parser.add_argument('--iterations', type=int, default=500,
                        help='Number of boosting iterations (default: 500)')
    parser.add_argument('--verbose', type=int, default=False,
                        help='Verbose frequency (default: False, 100 for every 100 iters)')
    return parser.parse_args()


def check_clearml_env():
    required_env_vars = [
        "CLEARML_WEB_HOST",
        "CLEARML_API_HOST",
        "CLEARML_FILES_HOST",
        "CLEARML_API_ACCESS_KEY",
        "CLEARML_API_SECRET_KEY"
    ]
    env_vars = dict(CLEARML_WEB_HOST="https://app.clear.ml/",
                    CLEARML_API_HOST="https://api.clear.ml",
                    CLEARML_FILES_HOST="https://files.clear.ml"
                    )

    for var in required_env_vars[:3]:
        if os.getenv(var) is None:
            os.environ[var] = env_vars[var]

    missing_vars = [var for var in required_env_vars if os.getenv(var) is None]

    if missing_vars:
        print("‚ö†Ô∏è  –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —Å—Ä–µ–¥—ã ClearML –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.")
        for var in missing_vars:
            os.environ[var] = getpass(f"–í–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è {var}: ")
        print("‚úÖ –í—Å–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ ClearML —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã.\n")


@dataclass
class CFG:
    project_name: str = "ClearML_practice"
    experiment_name: str = "M1_ClearML_practice"

    data_path: str = "../data"
    train_name: str = "quickstart_train.csv"
    seed: int = 127


def seed_everything(seed=2024):
    np.random.seed(seed)
    # torch.manual_seed(seed)
    # torch.cuda.manual_seed(seed)
    # torch.backends.cudnn.deterministic = True


check_clearml_env()

# –ü–æ–ª—É—á–∞–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã
args = parse_args()

cfg = CFG()

seed_everything(cfg.seed)

task = Task.init(project_name=cfg.project_name,
                 task_name=cfg.experiment_name,
                 )

logger = Logger.current_logger()

# –î–æ–±–∞–≤—å—Ç–µ —Ç—ç–≥–∏ –æ–±—É—á–µ–Ω–∏—è
task.add_tags(["CB_classifier", "1-st Task"])

# –õ–æ–≥–∏—Ä—É–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
task.connect({"command_line_args": vars(args)})

# –ö–æ–Ω—Ñ–∏–≥ –∑–∞–ø—É—Å–∫–∞
task.connect(asdict(cfg), "data_config", )

# 4Ô∏è‚É£ –ü–æ–¥–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
url = "https://github.com/a-milenkin/ml_instruments/raw/refs/heads/main/data/quickstart_train.csv"
df = pd.read_csv(url)

# EDA

# –ü–æ—Å–º–æ—Ç—Ä–∏–º –Ω–∞ –ø—Ä–æ–ø—É—Å–∫–∏
missing_info = df.isna().sum()
print("–ü—Ä–æ–ø—É—Å–∫–∏ –≤ –¥–∞–Ω–Ω—ã—Ö:")
print(missing_info)

logger.report_table(
    title="Missing Values Analysis",
    series="Missing Count",
    table_plot=missing_info.to_frame(name='Missing Count')
)

# –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –≤–∏–¥–∞–º –ø–æ–ª–æ–º–æ–∫ –∏ –∏—Ö –∫–æ–ª–∏—á–µ—Å—Ç–≤—É
target_distribution = df.target_class.value_counts(normalize=True)
target_counts = df.target_class.value_counts()

# –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—É—é —Ç–∞–±–ª–∏—Ü—É
distribution_df = pd.DataFrame({
    'Count': target_counts,
    'Proportion': target_distribution
})

print("–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤–∏–¥–æ–≤ –ø–æ–ª–æ–º–æ–∫:")
print(distribution_df)

logger.report_table(
    title="Target Class Distribution",
    series="Complete Analysis",
    table_plot=distribution_df
)

# –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –≤–∏–¥–∞–º –ø–æ–ª–æ–º–æ–∫ –ø—Ä–∏–º–µ—Ä–Ω–æ –æ–¥–∏–Ω–∞–∫–æ–≤–æ–µ.

# –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –∫–ª–∞—Å—Å–∞–º –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π
car_type_distribution = df.car_type.value_counts(normalize=True)
car_type_counts = df.car_type.value_counts()

# –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—É—é —Ç–∞–±–ª–∏—Ü—É
car_type_df = pd.DataFrame({
    'Count': car_type_counts,
    'Proportion': car_type_distribution
})

print("–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –∫–ª–∞—Å—Å–∞–º –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π:")
print(car_type_df)

# –õ–æ–≥–∏—Ä—É–µ–º –≤ ClearML
logger.report_table(
    title="Car Type Distribution",
    series="Complete Analysis",
    table_plot=car_type_df
)

# –û—Å–Ω–æ–≤—É –ø–∞—Ä–∫–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç —ç–∫–æ–Ω–æ–º –∫–ª–∞—Å—Å,
# –∞ –≤–æ—Ç –ø—Ä–µ–º–∏—É–º –∏ –±–∏–∑–Ω–µ—Å –ø–æ 3-5% –æ—Ç –æ–±—â–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞.

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç–∏–ª—è –≥—Ä–∞—Ñ–∏–∫–æ–≤
sns.set(style="whitegrid")
plt.figure(figsize=(15, 5))

# 1. –ì–∏—Å—Ç–æ–≥—Ä–∞–º–º–∞ –ø–æ year_to_work
plt.subplot(1, 2, 1)
sns.histplot(data=df, x='year_to_work', bins=9, kde=True)
plt.title('–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –≥–æ–¥—É –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã')
plt.xlabel('–ì–æ–¥ –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã')
plt.ylabel('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ')

# 2. –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ car_rating
plt.subplot(1, 2, 2)
sns.histplot(data=df, x='car_rating', bins=30, kde=True)
plt.title('–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–µ–π—Ç–∏–Ω–≥–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π')
plt.xlabel('–†–µ–π—Ç–∏–Ω–≥')
plt.ylabel('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ')
plt.tight_layout()
# plt.show()
logger.report_matplotlib_figure(
    title="–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–µ–π—Ç–∏–Ω–≥–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π",
    series="Matplotlib Version",
    figure=plt.gcf(),
    report_interactive=True
)
plt.close()

# –í—Ç–æ—Ä–∞—è –≥—Ä—É–ø–ø–∞ –≥—Ä–∞—Ñ–∏–∫–æ–≤
plt.figure(figsize=(15, 5))

# 3. –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ riders
plt.subplot(1, 2, 1)
sns.histplot(data=df, x='riders', bins=30, kde=True)
plt.title('–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ–µ–∑–¥–æ–∫')
plt.xlabel('–ß–∏—Å–ª–æ –ø–æ–µ–∑–¥–æ–∫')
plt.ylabel('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ')

# 4. –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ target_reg
plt.subplot(1, 2, 2)
sns.histplot(data=df, x='target_reg', bins=30, kde=True)
plt.title('–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –¥–æ –ø–æ–ª–æ–º–∫–∏')
plt.xlabel('–í—Ä–µ–º—è –¥–æ –ø–æ–ª–æ–º–∫–∏')
plt.ylabel('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ')
plt.tight_layout()
# plt.show()
logger.report_matplotlib_figure(
    title="–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –¥–æ –ø–æ–ª–æ–º–∫–∏",
    series="Matplotlib Version",
    figure=plt.gcf(),
    report_interactive=True
)
plt.close()

# –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–æ –≥–æ–¥–∞–º –∏ —Ä–µ–π—Ç–∏–Ω–≥—É —Å–∏–ª—å–Ω–æ –ø–æ—Ö–æ–∂–∏ –Ω–∞ –Ω–æ—Ä–º–∞–ª—å–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ,
# –¥–ª—è –¥–≤—É—Ö –¥—Ä—É–≥–∏—Ö –º–æ–∂–Ω–æ –ø—Ä–∏–º–µ–Ω–∏—Ç—å –º–µ—Ç–æ–¥—ã –º–∞—Ç.—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –≤–∏–¥–∞ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è.

plt.figure(figsize=(15, 6))

sns.boxplot(
    data=df,
    y='car_type',
    x='target_reg',
    hue='car_type',  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç—É –∂–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é, —á—Ç–æ –∏ –¥–ª—è y
    orient='h',
    palette='viridis',
    width=0.7,
    linewidth=1.5,
    dodge=False,  # –û—Ç–∫–ª—é—á–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ (dodge)
    legend=False  # –û—Ç–∫–ª—é—á–∞–µ–º –ª–µ–≥–µ–Ω–¥—É, —Ç–∞–∫ –∫–∞–∫ –æ–Ω–∞ –∏–∑–±—ã—Ç–æ—á–Ω–∞
)

# –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∏ –ø–æ–¥–ø–∏—Å–∏
plt.title('–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –¥–æ –ø–æ–ª–æ–º–∫–∏ –ø–æ –∫–ª–∞—Å—Å–∞–º –º–∞—à–∏–Ω', fontsize=16, pad=20)
plt.xlabel('–í—Ä–µ–º—è –¥–æ –ø–æ–ª–æ–º–∫–∏ (–¥–Ω–∏)', fontsize=12)
plt.ylabel('–ö–ª–∞—Å—Å –º–∞—à–∏–Ω—ã', fontsize=12)

# –£–ª—É—á—à–∞–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–µ—Ç–∫–∏
plt.grid(axis='x', linestyle='--', alpha=0.4)

# –î–æ–±–∞–≤–ª—è–µ–º –∞–Ω–Ω–æ—Ç–∞—Ü–∏—é —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –Ω–∞–±–ª—é–¥–µ–Ω–∏–π –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–ª–∞—Å—Å–∞
for i, car_type in enumerate(df['car_type'].value_counts().index):
    count = df[df['car_type'] == car_type].shape[0]
    plt.text(
        x=df['target_reg'].max() * 0.99,
        y=i,
        s=f'N={count}',
        va='center',
        ha='left',
        bbox=dict(facecolor='white', alpha=0.7, edgecolor='none')
    )

plt.tight_layout()
# plt.show()
logger.report_matplotlib_figure(
    title="–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –¥–æ –ø–æ–ª–æ–º–∫–∏ –ø–æ –∫–ª–∞—Å—Å–∞–º –º–∞—à–∏–Ω",
    series="Matplotlib Version",
    figure=plt.gcf(),
    report_interactive=True
)
plt.close()

cat_features = ["model", "car_type", "fuel_type"]  # –í—ã–¥–µ–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∞–ª—å–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏
targets = ["target_class", "target_reg"]
features2drop = ["car_id"]  # —ç—Ç–∏ —Ñ–∏—á–∏ –±—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã

# –û—Ç–±–∏—Ä–∞–µ–º –∏—Ç–æ–≥–æ–≤—ã–π –Ω–∞–±–æ—Ä –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –º–æ–¥–µ–ª—å—é
filtered_features = [i for i in df.columns if (i not in targets and i not in features2drop)]
num_features = [i for i in filtered_features if i not in cat_features]

print("cat_features", cat_features)
print("num_features", len(num_features))
print("targets", targets)

# –ò–∑–±–∞–≤–ª—è–µ–º—Å—è –æ—Ç NaN'–æ–≤
for c in cat_features:
    df[c] = df[c].astype(str)

train, test = train_test_split(df, test_size=0.2, random_state=cfg.seed)

# –¢–∞–∫–∂–µ –∑–∞–ª–æ–≥–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ, —á—Ç–æ–±—ã –Ω–µ –±—ã–ª–æ –ø—É—Ç–∞–Ω–Ω–∏—Ü—ã –≤ –≤–µ—Ä—Å–∏—è—Ö –¥–∞—Ç–∞—Å–µ—Ç–æ–≤
cfg.num_features = train.shape[1] - 2  # –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–∏—á–µ–π, –ø–æ–¥–∞–≤–∞–µ–º–æ–µ –Ω–∞ –≤—Ö–æ–¥
cfg.num_tar_class = (train.target_class.nunique())

# –ó–∞–ª–æ–≥–∏—Ä—É–π—Ç–µ —Ç–æ–ª—å–∫–æ –≤–∞–ª–∏–¥–∞—Ü–∏–æ–Ω–Ω—É—é –≤—ã–±–æ—Ä–∫—É!
print("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∞–ª–∏–¥–∞—Ü–∏–æ–Ω–Ω–æ–π –≤—ã–±–æ—Ä–∫–µ:")
print(f"–†–∞–∑–º–µ—Ä: {test.shape}")
print(f"–î–æ–ª—è –æ—Ç –æ–±—â–µ–≥–æ –¥–∞—Ç–∞—Å–µ—Ç–∞: {len(test) / len(df):.2%}")

# –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤—ã–±–æ—Ä–∫–µ
split_info = pd.DataFrame({
    'Dataset': ['Train', 'Test'],
    'Samples': [len(train), len(test)],
    'Percentage': [len(train) / len(df), len(test) / len(df)]
})

logger.report_table(
    title="Dataset Split Information",
    series="Split Summary",
    table_plot=split_info
)

# –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ test –≤—ã–±–æ—Ä–∫–µ
test_info = pd.DataFrame({
    'Metric': ['Total Samples', 'Number of Features', 'Test Size Percentage'],
    'Value': [len(test), len(test.columns), f"{len(test) / len(df):.2%}"]
})

logger.report_table(
    title="Validation Set Details",
    series="Test Set Characteristics",
    table_plot=test_info
)

logger.report_table(title="Valid data", series="datasets", table_plot=test)

X_train = train[filtered_features]
y_train = train["target_class"]

X_test = test[filtered_features]
y_test = test["target_class"]

# 5Ô∏è‚É£ –û–±—É—á–∞–µ–º –º–æ–¥–µ–ª—å–∫—É

cb_params = {
    "iterations": args.iterations,
    "depth": 4,
    "learning_rate": 0.06,
    "loss_function": "MultiClass",
    "custom_metric": ["Recall"],
    # –ì–ª–∞–≤–Ω–∞—è —Ñ–∏—à–∫–∞ –∫–∞—Ç–±—É—Å—Ç–∞ - —Ä–∞–±–æ—Ç–∞ —Å –∫–∞—Ç–µ–≥–æ—Ä–∏–∞–ª—å–Ω—ã–º–∏ –ø—Ä–∏–∑–Ω–∞–∫–∞–º–∏
    "cat_features": cat_features,
    # –†–µ–≥—É–ª—è—Ä–∏–∑–∞—Ü–∏—è –∏ —É—Å–∫–æ—Ä–µ–Ω–∏–µ
    "colsample_bylevel": 0.098,
    "subsample": 0.95,
    "l2_leaf_reg": 9,
    "min_data_in_leaf": 243,
    "max_bin": 187,
    "random_strength": 1,
    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —É—Å–∫–æ—Ä–µ–Ω–∏—è
    "task_type": "CPU",
    "thread_count": -1,
    "bootstrap_type": "Bernoulli",
    # –í–∞–∂–Ω–æ–µ!
    "random_seed": cfg.seed,
    "early_stopping_rounds": 50,
}

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ CatBoost –≤ ClearML https://clear.ml/docs/latest/docs/guides/frameworks/catboost/

# –õ–æ–≥–∏—Ä—É–µ–º –≥–∏–ø–µ—Ä–ø–∞—Ä–∞–º–µ—Ç—Ä—ã
task.connect(cb_params)

# –ó–∞–º–µ—Ä –≤—Ä–µ–º–µ–Ω–∏ –æ–±—É—á–µ–Ω–∏—è
start_time = time.time()

model = CatBoostClassifier(**cb_params)

# –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏
model.fit(
    X_train,
    y_train,
    eval_set=(X_test, y_test),
    verbose=args.verbose,
)

training_time = time.time() - start_time
print(f"–í—Ä–µ–º—è –æ–±—É—á–µ–Ω–∏—è: {training_time:.2f} —Å–µ–∫—É–Ω–¥")

# –õ–æ–≥–∏—Ä—É–µ–º –æ–±—â–µ–µ –≤—Ä–µ–º—è –æ–±—É—á–µ–Ω–∏—è
logger.report_single_value(name="Total Training Time", value=training_time)

# –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –∏ –º–µ—Ç—Ä–∏–∫–∏ –Ω–∞ —Ç–µ—Å—Ç–µ
y_pred = model.predict(X_test)
y_pred_proba = model.predict_proba(X_test)

# –ú–µ—Ç—Ä–∏–∫–∏ –Ω–∞ —Ç–µ—Å—Ç–µ

# –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
test_accuracy = accuracy_score(y_test, y_pred)
test_f1 = f1_score(y_test, y_pred, average='weighted')
test_precision = precision_score(y_test, y_pred, average='weighted')
test_recall = recall_score(y_test, y_pred, average='weighted')

# ROC AUC (–¥–ª—è –º–Ω–æ–≥–æ–∫–ª–∞—Å—Å–æ–≤–æ–π –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏)
try:
    if len(np.unique(y_test)) > 2:
        test_auc = roc_auc_score(y_test, y_pred_proba, multi_class='ovr')
    else:
        test_auc = roc_auc_score(y_test, y_pred_proba[:, 1])
except Exception as e:
    print(f"ROC AUC calculation skipped: {e}")
    test_auc = None

print("\n" + "=" * 50)
print("–§–ò–ù–ê–õ–¨–ù–´–ï –ú–ï–¢–†–ò–ö–ò –ù–ê –¢–ï–°–¢–ï")
print("=" * 50)
print(f"Accuracy: {test_accuracy:.4f}")
print(f"F1 Score: {test_f1:.4f}")
print(f"Precision: {test_precision:.4f}")
print(f"Recall: {test_recall:.4f}")
if test_auc is not None:
    print(f"ROC AUC: {test_auc:.4f}")

# –õ–æ–≥–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
logger.report_single_value(name="Test Accuracy", value=test_accuracy)
logger.report_single_value(name="Test F1 Score", value=test_f1)
logger.report_single_value(name="Test Precision", value=test_precision)
logger.report_single_value(name="Test Recall", value=test_recall)
if test_auc is not None:
    logger.report_single_value(name="Test ROC AUC", value=test_auc)

# –õ–æ–≥–∏—Ä—É–µ–º –≤–∞–∂–Ω–æ—Å—Ç—å –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
feature_importance = model.get_feature_importance()
feature_names = X_train.columns.tolist()

importance_df = pd.DataFrame({
    'Feature': feature_names,
    'Importance': feature_importance
}).sort_values('Importance', ascending=False)

print("\n–¢–æ–ø-10 –≤–∞–∂–Ω—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤:")
print(importance_df.head(10))

logger.report_table(
    title="Feature Importance",
    series="All Features",
    table_plot=importance_df
)

logger.report_table(
    title="Feature Importance",
    series="Top 10 Features",
    table_plot=importance_df.head(10)
)

# –î–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç –ø–æ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏
cls_report = classification_report(
    y_test, y_pred, target_names=[str(x) for x in sorted(y_test.unique())], output_dict=True
)
cls_report_df = pd.DataFrame(cls_report).T

print("\nClassification Report:")
print(cls_report_df)

# 6Ô∏è‚É£ –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ ClearML

# –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏
logger.report_table(
    title="Classification Report",
    series="Test Set Results",
    table_plot=cls_report_df
)

# –õ–æ–≥–∏—Ä—É–µ–º –∫—Ä–∏–≤—ã–µ –æ–±—É—á–µ–Ω–∏—è (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω—ã)
try:
    # –õ–æ–≥–∏—Ä—É–µ–º –º–µ—Ç—Ä–∏–∫–∏ –ø–æ –∏—Ç–µ—Ä–∞—Ü–∏—è–º
    eval_metrics = model.get_evals_result()

    for metric_name, metric_values in eval_metrics['validation'].items():
        for iteration, value in enumerate(metric_values):
            logger.report_scalar(
                title="Training Metrics",
                series=metric_name,
                value=value,
                iteration=iteration
            )

except Exception as e:
    print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –º–µ—Ç—Ä–∏–∫–∏ –æ–±—É—á–µ–Ω–∏—è: {e}")

# –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–æ–¥–µ–ª—å
# model.save_model('catboost_model.cbm')
task.upload_artifact('model', artifact_object='catboost_model.cbm')

print("–û–±—É—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ! –ú–æ–¥–µ–ª—å –∏ –º–µ—Ç—Ä–∏–∫–∏ –∑–∞–ª–æ–≥–∏—Ä–æ–≤–∞–Ω—ã –≤ ClearML\n–ó–∞–∫—Ä—ã–≤–∞—é Task'—É...")

# –ù–µ –∑–∞–±—ã–≤–∞–µ–º –∑–∞–≤–µ—Ä—à–∏—Ç—å Task'—É
task.close()
