import pandas as pd
import torch
import argparse
from PIL import Image
from tqdm import tqdm
from pathlib import Path
from transformers import ViTImageProcessor, ViTModel
from custom_classes import CFG, ViTBinaryClassifier, MedicalNetModule


def parse_args():
    parser = argparse.ArgumentParser(description='–ò–Ω—Ñ–µ—Ä–µ–Ω—Å –º–æ–¥–µ–ª–∏ –Ω–∞ –∫–∞—Ç–∞–ª–æ–≥–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π')

    parser.add_argument('--data_dir', type=str,
                        help='–ü—É—Ç—å –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏ –¥–ª—è –∏–Ω—Ñ–µ—Ä–µ–Ω—Å–∞')
    parser.add_argument('--weights_path', type=str,
                        help='–ü—É—Ç—å –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –≤–µ—Å–æ–≤ –º–æ–¥–µ–ª–∏')
    parser.add_argument('--output_csv', type=str,
                        help='–ü—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ CSV')

    args = parser.parse_args()

    # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å–æ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    cfg = CFG()

    if args.data_dir:
        cfg.data_dir = Path(args.data_dir)
    else:
        cfg.data_dir = cfg.data_dir / "test_png"

    if args.weights_path:
        cfg.weights_path = Path(args.weights_path)

    if args.output_csv:
        cfg.output_csv = Path(args.output_csv)
        cfg.output_csv.mkdir(parents=True, exist_ok=True)
    else:
        cfg.output_csv = cfg.logs_dir / cfg.output_csv

    return cfg


def process_single_image(image_path, model, image_processor, device):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–¥–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
    try:
        image = Image.open(image_path).convert("RGB")
        inputs = image_processor(image, return_tensors="pt").to(device)

        with torch.no_grad():
            logits = model(inputs)
            prob = torch.sigmoid(logits).item()
            pred = int(prob > 0.5)

        return {'filename': image_path.name,
                'probability': prob,
                'prediction': pred,
                'status': 'success'
                }
    except Exception as e:
        return {'filename': image_path.name,
                'probability': None,
                'prediction': None,
                'status': f'error: {str(e)}'
                }


def process_directory(directory_path, model, image_processor, device, output_csv=None):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏

    Args:
        directory_path: –ü—É—Ç—å –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏
        model: –ú–æ–¥–µ–ª—å –¥–ª—è –∏–Ω—Ñ–µ—Ä–µ–Ω—Å–∞
        image_processor: –ü—Ä–µ–ø—Ä–æ—Ü–µ—Å—Å–æ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        device: –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏–π
        output_csv: –ü—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    """
    directory_path = Path(directory_path)

    # –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    supported_formats = {'.jpg', '.jpeg', '.png', '.bmp', '.tiff', '.tif'}

    # –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    image_files = []
    for format in supported_formats:
        image_files.extend(directory_path.glob(f"*{format}"))
        image_files.extend(directory_path.glob(f"*{format.upper()}"))

    print(f"üìÅ –ù–∞–π–¥–µ–Ω–æ {len(image_files)} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏: {directory_path}")

    if len(image_files) == 0:
        print("‚ùå –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã:", supported_formats)
        return None

    results = []

    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–æ–º
    for image_path in tqdm(image_files, desc="–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π"):
        result = process_single_image(image_path, model, image_processor, device)
        results.append(result)

    # –°–æ–∑–¥–∞–µ–º DataFrame —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
    df_results = pd.DataFrame(results)

    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    successful = len(df_results[df_results['status'] == 'success'])
    errors = len(df_results[df_results['status'] != 'success'])

    print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏:")
    print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {successful}")
    print(f"‚ùå –û—à–∏–±–æ–∫: {errors}")

    if successful > 0:
        avg_prob = df_results[df_results['status'] == 'success']['probability'].mean()
        class_0 = len(
            df_results[(df_results['status'] == 'success') & (df_results['prediction'] == 0)])
        class_1 = len(
            df_results[(df_results['status'] == 'success') & (df_results['prediction'] == 1)])

        print(f"üìà –°—Ä–µ–¥–Ω—è—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å: {avg_prob:.4f}")
        print(f"üéØ –ö–ª–∞—Å—Å 0: {class_0} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
        print(f"üéØ –ö–ª–∞—Å—Å 1: {class_1} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ CSV –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω –ø—É—Ç—å
    if output_csv:
        output_path = Path(output_csv)
        output_path.parent.mkdir(parents=True, exist_ok=True)
        df_results.to_csv(output_path, index=False, encoding='utf-8')
        print(f"üíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: {output_path}")

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–∏–º–µ—Ä–æ–≤
    if successful > 0:
        print("\nüìã –ü—Ä–∏–º–µ—Ä—ã —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:")
        success_results = df_results[df_results['status'] == 'success'].head(5)
        for _, row in success_results.iterrows():
            print(
                f"  {row['filename']}: prob={row['probability']:.4f}, pred={row['prediction']}")

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫–∏ –µ—Å–ª–∏ –µ—Å—Ç—å
    if errors > 0:
        print(f"\n‚ö†Ô∏è  –§–∞–π–ª—ã —Å –æ—à–∏–±–∫–∞–º–∏:")
        error_results = df_results[df_results['status'] != 'success'].head(5)
        for _, row in error_results.iterrows():
            print(f"  {row['filename']}: {row['status']}")

    return df_results


if __name__ == '__main__':
    # ====== –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ======
    torch.use_deterministic_algorithms(True, warn_only=True)

    device = torch.device("cuda" if torch.cuda.is_available() else "cpu")

    # ============== –ü–∞—Ä—Å–∏–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏ =========================
    cfg = parse_args()

    cfg.model_name = "itsomk/vit-xray-v1"
    checkpoint_path = cfg.weights_path / "best_model.ckpt"
    image_path = "Z:/python-datasets/CXR8/ct_dataset_png/pneumonia_anon_10000492_anon.png"

    # ====== –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª—å ======
    vit_model = ViTBinaryClassifier(pretrained_model=cfg.model_name)

    # –ó–∞–≥—Ä—É–∂–∞–µ–º —á–µ—Ä–µ–∑ LightningModule
    model = MedicalNetModule.load_from_checkpoint(
        checkpoint_path=checkpoint_path,
        resnet_model=vit_model,  # –ø–µ—Ä–µ–¥–∞–µ–º ViT –º–æ–¥–µ–ª—å
        map_location=device
    )
    model.to(device)
    model.eval()

    # ====== –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–µ–ø—Ä–æ—Ü–µ—Å—Å–æ—Ä ======
    image_processor = ViTImageProcessor.from_pretrained(cfg.model_name)

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ–≥–æ –∫–∞—Ç–∞–ª–æ–≥–∞
    image_dir = cfg.data_dir
    output_csv = cfg.output_csv

    print("üöÄ –ó–∞–ø—É—Å–∫ –∏–Ω—Ñ–µ—Ä–µ–Ω—Å–∞ –¥–ª—è –∫–∞—Ç–∞–ª–æ–≥–∞...")
    print(f"üìÅ –í—Ö–æ–¥–Ω–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {image_dir}")
    print(f"üíæ –í—ã—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª: {output_csv}")
    print(f"‚öôÔ∏è  –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: {device}")
    print("-" * 50)

    results_df = process_directory(
        directory_path=image_dir,
        model=model,
        image_processor=image_processor,
        device=device,
        output_csv=output_csv
    )

    print("\nüéâ –ò–Ω—Ñ–µ—Ä–µ–Ω—Å –∑–∞–≤–µ—Ä—à–µ–Ω!")
